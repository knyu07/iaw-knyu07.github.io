{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Principal"},{"location":"about/","text":"","title":"Acerca de"},{"location":"practica01/","text":"INSTALACI\u00d3N DE LA PILA LAMP LAMP Lo primero que har\u00e9mos ser\u00e1 actualizar la lista de paquetes con : apt update y despu\u00e9s actualizamos los p\u00e1quetes instalados: apt upgrade APACHE SERVER Ya actualizado todo procedemos a instalar Apache Server con el comando: apt install apache2 Con Apache ya instalado podemos entrar en sus archivos de configuaci\u00f3n: mods-available mods-enable conf-available conf-enable sites-available sites-enable Y estas se almacenan en el directorio /etc/apache2 Ademas de poder entrar tambi\u00e9n en los archivos .log: /var/log/apache2/access.log : El servidor almacena en el registro de acceso informaci\u00f3n sobre todas las peticiones que procesa. /var/log/apache2/error.log : El registro de errores del servidor. MySQL SERVER Instalamos con el comando: apt install mysql-server Ya instalado podemos acceder a los archivos de configuraci\u00f3n y de .log: /etc/mysql/mysql.cnf /etc/mysql/conf.d/ /etc/mysql/mysql.conf.d/ /var/log/mysql/error.log Para entrar en modo consola con el usuario root pondremos sudo su podremos entrar sin necesidad de poner contrase\u00f1a, para que root tenga contrase\u00f1a tenemos dos maneras diferentes de hacerlo: - Metodo 1 Seleccionamos la base de datos mysql ( USE mysql;) en la cual podremos ver todos los usuarios que existen y qu\u00e9 m\u00e9todo tienen establecido para autenticar. ( SELECT User, Host, plugin FROM user;) Para cambiarlo solo necesitariamos hacer uso de: ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'nueva_contrase\u00f1a'; Y para que se apliquen los cambios usamos: FLUSH PRIVILEGES ; - Metodo 2 Otra opci\u00f3n para modificar la contrase\u00f1a del usuario root en MySQL es iniciar el servicio con la opci\u00f3n --skip-grant-tables, que permite que cualquier usuario se pueda conectar sin necesidad de realizar el proceso de autenticaci\u00f3n. El primer paso ser\u00e1 detener MySQL y vamos a iniciar el proceso de MySQL de forma manual. Creamos el directorio /var/run/mysqld y le asignamos que el propietario de este directorio es mysql del grupo mysql. mkdir -p /var/run/mysqld chown mysql:mysql /var/run/mysqld Volvemos a iniciar el proceso, pas\u00e1ndole como par\u00e1metro la opci\u00f3n --skip-grant-tables que permite conectarnos sin contrase\u00f1a y con todos los privilegios. /usr/sbin/mysqld --skip-grant-tables & (Los & se usan para que el proceso se) ejecute en segundo plano) Para comprobar que este se est\u00e1 ejecutando hacemos uso del comando: ps aux | grep mysqld Nos conectamos a MySQL como root con todo los privilegios (entramos sin contrase\u00f1a y usuario) mysql Ahora tendremos que indicarle al servidor que tiene que recargar las tablas encargadas de la autenticaci\u00f3n de los usuarios para poder activar la gesti\u00f3n de usuarios. Recuerda que la opci\u00f3n --skip-grant-tables deshabilita esta funcionalidad. FLUSH PRIVILEGES ; Cambiamos contrase\u00f1a: ALTER USER 'root'@'localhost' IDENTIFIED BY 'nueva_contrase\u00f1a'; Y para finalizar salimos del cliente MySQL, detenemos el proceso y reiniciamos exit; (Salimos) pkill mysqld (Detenemos proceso) systemctl restart mysql (Reiniciamos) PHP Instalamos los m\u00f3dulos apt install php libapache2-mod-php php-mysql \u00b7 libapache2-mod-php: Permite servir p\u00e1ginas PHP desde el servidor web apache. \u00b7 php-mysql: Permite conectar a una base de datos MySQL desde c\u00f3digo PHP. Creamos un archivo para comprobar si la instalaci\u00f3n se ha realizado correctamente. nano /var/www/html/info.php Y a\u00f1adimos dentro: ------------------------LAMP---------------------------- HERRAMIENTAS PARA LA LAMP PhpMyAdmin Lo primero que debemos hacer ser\u00e1 instalar los paquetes: apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl Contenido de los paquetes: php-mbstring : Incluye el m\u00f3dulo mbstring (multi-byte string) que permite administrar cadenas no-ASCII y convertir cadenas a diferentes codificaciones. php-zip : Permite la carga de archivos .zip a phpMyAdmin. php-gd : Incluye la librer\u00eda GD Graphics que permite crear y modificar im\u00e1genes. php-json : A\u00f1ade soporte para trabajar con el formato JSON desde PHP. php-curl : Permite interactuar con servidores haciendo uso de diferentes protocolos desde PHP. Durante el proceso de instalaci\u00f3n aparecer\u00e1 una ventana la cual nos preguntar\u00e1 que tipo de servidor web vamos a usar para ejecutar phpmyadmin apache2 Confirmamos que vamos a utilizar el dbconfig-common para configurar la base de datos y finalmente nos solicitar\u00e1 una contrase\u00f1a para phpmyadmin. GoAccess Para instalar GoAccess tendremos que a\u00f1adir los repositorios oficiales: echo \"deb http://deb.goaccess.io/ $(lsb_release -cs) main\" | sudo tee -a /etc/apt/sources.list.d/goaccess.list Descargamos los archivos wget -O - https://deb.goaccess.io/gnugpg.key | sudo apt-key add - Y finalmente actualizamos e instalamos apt-get update apt-get install goaccess Una vez instalado podremos hacer: \u00b7 Parchear el archivo log access.log que nos miestra la informaci\u00f3n del log a tiempo real goaccess /var/log/apache2/access.log -c Parchear un archivo log que genera un archivo HTML est\u00e1tico goaccess /var/log/apache2/access.log -o /var/www/html/report.html --log-format=COMBINED O parchear un archivo log que genere un archivo HTML en tiempo real goaccess /var/log/apache2/access.log -o /var/www/html/report.html --log-format=COMBINED --real-time-html Y para finalizar con la configuraci\u00f3n de GoAccess crearemos un directorio llamado stats en la cual podremos consultar los informes generados. (Este debe estar controlado por lo que solo podremos accedes con usuario y contrase\u00f1a) mkdir /var/www/html/stats Lanzamos este proceso en segundo plano goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html & Pero este & cerrar\u00eda la sesi\u00f3n SSH en caso de que estuvieramos conectados y ppara evitar esto tenemos estas siguientes utilidades: nohup : Ejecuta el comando que recibe como par\u00e1metro y hace que ignore las se\u00f1ales SIGHUP, que son las se\u00f1ales que se env\u00edan a un proceso cuando el terminal que los controla se cierra. nohup goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html & screen : Permite iniciar una sesi\u00f3n y tener varios terminales virtuales en ella. Los procesos que se ejecutan en estos terminales virtuales no finalizar\u00e1n al cerrar el terminal virtual. screen -dmL goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html tmux : Es una alternativa m\u00e1s reciente que screen. Creamos el archivo de contrase\u00f1as para el usuario que acceder\u00e1 al directorio stats. El archivo de contrase\u00f1as lo guardamos en un directorio seguro que no sea accesible desde el exterior. En nuestro caso el archivo se llamar\u00e1 .htpasswd htpasswd -c /home/ usuario /.htpasswd usuario Editamos el archivo de configuraci\u00f3n de Apache nano /etc/apache2/sites-enabled/000-default.conf Y en ella a\u00f1adiremos lo siguiente: Por \u00faltimo en el directorio stats lanzamos el proceso en segundo plano de gooaccess para restringir el acceso por usuario y contrase\u00f1a al directorio .htpasswd htpasswd -c /home/ usuario /.htpasswd usuario Creamos el archivo .htpasswd nano /var/www/html/stats/.htaccess Y dentro de el a\u00f1adiremos: AuthType Basic AuthName \"Acceso restringido\" AuthBasicProvider file AuthUserFile \"/home/usuario/.htpasswd\" Require valid-user Editamos el archivo de configuraci\u00f3n de apache: nano /etc/apache2/sites-enabled/000-default.conf Y a\u00f1adiremos: AWStats Es una herramienta open source de informes de an\u00e1lisis web, apta para analizar datos de servicios de Internet como un servidor web, streaming, mail y FTP. AWstats analiza los archivos de log del servidor, y bas\u00e1ndose en ellos produce informes HTML. Para ello actualizamos e instalamos lo paquetes apt-get update apt-get install awstats libgeo-ipfree-perl libnet-ip-perl Y ya instalado ahora podremos configurar cp /etc/awstats/awstats.conf /etc/awstats/awstats.example.com.conf Dentro de este har\u00edamos nuestros cambios: LogFormat=1 SiteDomain=\"ejemplo.com\" HostAliases=\"localhost 127.0.0.1 example.com\" AllowFullYearView=3 AllowAccessFromWebToFollowingIPAddresses=\"127.0.0.1 192.168.1.0-192.168.1.255\" LoadPlugin=\"informaci\u00f3n sobre herramientas\" LoadPlugin=\"graphgooglechartapi\" LoadPlugin=\"geoipfree\" Eliminamos datos existentes para que no de error sudo mv /etc/cron.d/awstats/root sudo rm /var/lib/awstats/* Y a continuaci\u00f3n cambiamos los permisos: chgrp www-data /var/log/apache2/var/log/apache2/* log /var/log/apache2/access.log chmod 755 /var/log/apache2 sudo chmod 644 /var/log/apache2/* Modificamos archivo: nano /etc/logrotate.d/apache2 Y cambiamos el crear 640 por crear 640 root www-data Configuramos los archivos de apache: nano /etc/apache2/sites-available/example.com.conf Y lo arreglaremos as\u00ed: Alias \u200b\u200b/awstatsclasses\"/usr/share/awstats/lib/\" Alias \u200b\u200b/awstats-icon/\"/usr/share/awstats/icon/\" Alias \u200b\u200b/ awstatscss\"/usr/share/doc/awstats/examples/css\" ScriptAlias \u200b\u200b/cgi-bin/ /usr/lib/cgi-bin/ ScriptAlias \u200b\u200b/awstats/ /usr/lib/cgi-bin/ Opciones + ExecCGI -MultiViews + SymLinksIfOwnerMatch Cerramos el archivo y activamos el modulo CGI: a2enmod cgi Y finalmente reiniciamos apache","title":"Practica 1"},{"location":"practica01/#instalacion-de-la-pila-lamp","text":"","title":"INSTALACI\u00d3N DE LA PILA LAMP"},{"location":"practica01/#lamp","text":"Lo primero que har\u00e9mos ser\u00e1 actualizar la lista de paquetes con : apt update y despu\u00e9s actualizamos los p\u00e1quetes instalados: apt upgrade","title":"LAMP"},{"location":"practica01/#apache-server","text":"Ya actualizado todo procedemos a instalar Apache Server con el comando: apt install apache2 Con Apache ya instalado podemos entrar en sus archivos de configuaci\u00f3n: mods-available mods-enable conf-available conf-enable sites-available sites-enable Y estas se almacenan en el directorio /etc/apache2 Ademas de poder entrar tambi\u00e9n en los archivos .log: /var/log/apache2/access.log : El servidor almacena en el registro de acceso informaci\u00f3n sobre todas las peticiones que procesa. /var/log/apache2/error.log : El registro de errores del servidor.","title":"APACHE SERVER"},{"location":"practica01/#mysql-server","text":"Instalamos con el comando: apt install mysql-server Ya instalado podemos acceder a los archivos de configuraci\u00f3n y de .log: /etc/mysql/mysql.cnf /etc/mysql/conf.d/ /etc/mysql/mysql.conf.d/ /var/log/mysql/error.log Para entrar en modo consola con el usuario root pondremos sudo su podremos entrar sin necesidad de poner contrase\u00f1a, para que root tenga contrase\u00f1a tenemos dos maneras diferentes de hacerlo:","title":"MySQL SERVER"},{"location":"practica01/#-metodo-1","text":"Seleccionamos la base de datos mysql ( USE mysql;) en la cual podremos ver todos los usuarios que existen y qu\u00e9 m\u00e9todo tienen establecido para autenticar. ( SELECT User, Host, plugin FROM user;) Para cambiarlo solo necesitariamos hacer uso de: ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'nueva_contrase\u00f1a'; Y para que se apliquen los cambios usamos: FLUSH PRIVILEGES ;","title":"- Metodo 1"},{"location":"practica01/#-metodo-2","text":"Otra opci\u00f3n para modificar la contrase\u00f1a del usuario root en MySQL es iniciar el servicio con la opci\u00f3n --skip-grant-tables, que permite que cualquier usuario se pueda conectar sin necesidad de realizar el proceso de autenticaci\u00f3n. El primer paso ser\u00e1 detener MySQL y vamos a iniciar el proceso de MySQL de forma manual. Creamos el directorio /var/run/mysqld y le asignamos que el propietario de este directorio es mysql del grupo mysql. mkdir -p /var/run/mysqld chown mysql:mysql /var/run/mysqld Volvemos a iniciar el proceso, pas\u00e1ndole como par\u00e1metro la opci\u00f3n --skip-grant-tables que permite conectarnos sin contrase\u00f1a y con todos los privilegios. /usr/sbin/mysqld --skip-grant-tables & (Los & se usan para que el proceso se) ejecute en segundo plano) Para comprobar que este se est\u00e1 ejecutando hacemos uso del comando: ps aux | grep mysqld Nos conectamos a MySQL como root con todo los privilegios (entramos sin contrase\u00f1a y usuario) mysql Ahora tendremos que indicarle al servidor que tiene que recargar las tablas encargadas de la autenticaci\u00f3n de los usuarios para poder activar la gesti\u00f3n de usuarios. Recuerda que la opci\u00f3n --skip-grant-tables deshabilita esta funcionalidad. FLUSH PRIVILEGES ; Cambiamos contrase\u00f1a: ALTER USER 'root'@'localhost' IDENTIFIED BY 'nueva_contrase\u00f1a'; Y para finalizar salimos del cliente MySQL, detenemos el proceso y reiniciamos exit; (Salimos) pkill mysqld (Detenemos proceso) systemctl restart mysql (Reiniciamos)","title":"- Metodo 2"},{"location":"practica01/#php","text":"Instalamos los m\u00f3dulos apt install php libapache2-mod-php php-mysql \u00b7 libapache2-mod-php: Permite servir p\u00e1ginas PHP desde el servidor web apache. \u00b7 php-mysql: Permite conectar a una base de datos MySQL desde c\u00f3digo PHP. Creamos un archivo para comprobar si la instalaci\u00f3n se ha realizado correctamente. nano /var/www/html/info.php Y a\u00f1adimos dentro:","title":"PHP"},{"location":"practica01/#-lamp-","text":"","title":"------------------------LAMP----------------------------"},{"location":"practica01/#herramientas-para-la-lamp","text":"","title":"HERRAMIENTAS PARA LA LAMP"},{"location":"practica01/#phpmyadmin","text":"Lo primero que debemos hacer ser\u00e1 instalar los paquetes: apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl Contenido de los paquetes: php-mbstring : Incluye el m\u00f3dulo mbstring (multi-byte string) que permite administrar cadenas no-ASCII y convertir cadenas a diferentes codificaciones. php-zip : Permite la carga de archivos .zip a phpMyAdmin. php-gd : Incluye la librer\u00eda GD Graphics que permite crear y modificar im\u00e1genes. php-json : A\u00f1ade soporte para trabajar con el formato JSON desde PHP. php-curl : Permite interactuar con servidores haciendo uso de diferentes protocolos desde PHP. Durante el proceso de instalaci\u00f3n aparecer\u00e1 una ventana la cual nos preguntar\u00e1 que tipo de servidor web vamos a usar para ejecutar phpmyadmin apache2 Confirmamos que vamos a utilizar el dbconfig-common para configurar la base de datos y finalmente nos solicitar\u00e1 una contrase\u00f1a para phpmyadmin.","title":"PhpMyAdmin"},{"location":"practica01/#goaccess","text":"Para instalar GoAccess tendremos que a\u00f1adir los repositorios oficiales: echo \"deb http://deb.goaccess.io/ $(lsb_release -cs) main\" | sudo tee -a /etc/apt/sources.list.d/goaccess.list Descargamos los archivos wget -O - https://deb.goaccess.io/gnugpg.key | sudo apt-key add - Y finalmente actualizamos e instalamos apt-get update apt-get install goaccess Una vez instalado podremos hacer: \u00b7 Parchear el archivo log access.log que nos miestra la informaci\u00f3n del log a tiempo real goaccess /var/log/apache2/access.log -c Parchear un archivo log que genera un archivo HTML est\u00e1tico goaccess /var/log/apache2/access.log -o /var/www/html/report.html --log-format=COMBINED O parchear un archivo log que genere un archivo HTML en tiempo real goaccess /var/log/apache2/access.log -o /var/www/html/report.html --log-format=COMBINED --real-time-html Y para finalizar con la configuraci\u00f3n de GoAccess crearemos un directorio llamado stats en la cual podremos consultar los informes generados. (Este debe estar controlado por lo que solo podremos accedes con usuario y contrase\u00f1a) mkdir /var/www/html/stats Lanzamos este proceso en segundo plano goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html & Pero este & cerrar\u00eda la sesi\u00f3n SSH en caso de que estuvieramos conectados y ppara evitar esto tenemos estas siguientes utilidades: nohup : Ejecuta el comando que recibe como par\u00e1metro y hace que ignore las se\u00f1ales SIGHUP, que son las se\u00f1ales que se env\u00edan a un proceso cuando el terminal que los controla se cierra. nohup goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html & screen : Permite iniciar una sesi\u00f3n y tener varios terminales virtuales en ella. Los procesos que se ejecutan en estos terminales virtuales no finalizar\u00e1n al cerrar el terminal virtual. screen -dmL goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html tmux : Es una alternativa m\u00e1s reciente que screen. Creamos el archivo de contrase\u00f1as para el usuario que acceder\u00e1 al directorio stats. El archivo de contrase\u00f1as lo guardamos en un directorio seguro que no sea accesible desde el exterior. En nuestro caso el archivo se llamar\u00e1 .htpasswd htpasswd -c /home/ usuario /.htpasswd usuario Editamos el archivo de configuraci\u00f3n de Apache nano /etc/apache2/sites-enabled/000-default.conf Y en ella a\u00f1adiremos lo siguiente: Por \u00faltimo en el directorio stats lanzamos el proceso en segundo plano de gooaccess para restringir el acceso por usuario y contrase\u00f1a al directorio .htpasswd htpasswd -c /home/ usuario /.htpasswd usuario Creamos el archivo .htpasswd nano /var/www/html/stats/.htaccess Y dentro de el a\u00f1adiremos: AuthType Basic AuthName \"Acceso restringido\" AuthBasicProvider file AuthUserFile \"/home/usuario/.htpasswd\" Require valid-user Editamos el archivo de configuraci\u00f3n de apache: nano /etc/apache2/sites-enabled/000-default.conf Y a\u00f1adiremos:","title":"GoAccess"},{"location":"practica01/#awstats","text":"Es una herramienta open source de informes de an\u00e1lisis web, apta para analizar datos de servicios de Internet como un servidor web, streaming, mail y FTP. AWstats analiza los archivos de log del servidor, y bas\u00e1ndose en ellos produce informes HTML. Para ello actualizamos e instalamos lo paquetes apt-get update apt-get install awstats libgeo-ipfree-perl libnet-ip-perl Y ya instalado ahora podremos configurar cp /etc/awstats/awstats.conf /etc/awstats/awstats.example.com.conf Dentro de este har\u00edamos nuestros cambios: LogFormat=1 SiteDomain=\"ejemplo.com\" HostAliases=\"localhost 127.0.0.1 example.com\" AllowFullYearView=3 AllowAccessFromWebToFollowingIPAddresses=\"127.0.0.1 192.168.1.0-192.168.1.255\" LoadPlugin=\"informaci\u00f3n sobre herramientas\" LoadPlugin=\"graphgooglechartapi\" LoadPlugin=\"geoipfree\" Eliminamos datos existentes para que no de error sudo mv /etc/cron.d/awstats/root sudo rm /var/lib/awstats/* Y a continuaci\u00f3n cambiamos los permisos: chgrp www-data /var/log/apache2/var/log/apache2/* log /var/log/apache2/access.log chmod 755 /var/log/apache2 sudo chmod 644 /var/log/apache2/* Modificamos archivo: nano /etc/logrotate.d/apache2 Y cambiamos el crear 640 por crear 640 root www-data Configuramos los archivos de apache: nano /etc/apache2/sites-available/example.com.conf Y lo arreglaremos as\u00ed: Alias \u200b\u200b/awstatsclasses\"/usr/share/awstats/lib/\" Alias \u200b\u200b/awstats-icon/\"/usr/share/awstats/icon/\" Alias \u200b\u200b/ awstatscss\"/usr/share/doc/awstats/examples/css\" ScriptAlias \u200b\u200b/cgi-bin/ /usr/lib/cgi-bin/ ScriptAlias \u200b\u200b/awstats/ /usr/lib/cgi-bin/ Opciones + ExecCGI -MultiViews + SymLinksIfOwnerMatch Cerramos el archivo y activamos el modulo CGI: a2enmod cgi Y finalmente reiniciamos apache","title":"AWStats"},{"location":"practica17/","text":"Pr\u00e1ctica 17: Balanceo de carga con HAProxy En esta pr\u00e1ctica vamos a incluir un nuevo contenedor Docker con HAProxy para balancear la carga de los contenedores que ejecutan la aplicaci\u00f3n web. Docker Compose Para el archivo docker-compose.yml necesitaremos: Balanceo de carga MySQL phpmyadmin Apache Balanceo de carga (HAProxy) Utilizaremos la imagen dockercloud/haproxy de DockerHub, a\u00f1adiremos los puertos 80 y 1936 (abrir puertos en AWS) que nos permite acceder a una p\u00e1gina con informaci\u00f3n del balanceo. Creamos un enlace con el servicio que queremos balancear. Los enlaces permiten que los contenedores se descubran entre s\u00ed y transfieran de manera segura informaci\u00f3n sobre un contenedor a otro contenedor y para finalizar montaremos el socket UNIX del Docker daemon (/var/run/docker.sock) para que el contenedor lb pueda comunicarse con el Docker daemon y obtener informaci\u00f3n del resto de contenedores. lb: image: dockercloud/haproxy ports: - 80:80 - 1936:1936 links: - apache volumes: - /var/run/docker.sock:/var/run/docker.sock networks: - frontend-network Apache Cogeremos de la pr\u00e1ctica 16 la parte de apache, aunque haremos una modificaci\u00f3n. Dentro de apache tendremos que quitar el puerto se\u00f1alado (80:80). Como se puede ver ya est\u00e1 se\u00f1alado dentro del balanceador, ya que si queremos iniciar varios apaches no nos dejar\u00eda porque todos estar\u00edan escuchando al mismo puerto. apache: build: ./apache depends_on: - mysql networks: - frontend-network - backend-network restart: always Para phpmyadmin y MySQL cogeremos la de la pr\u00e1ctica anterior (no hay ning\u00fan cambio). Seguidamente creamos nuestro Dockerfile de nuestra imagen LAMP, nuestro archivo oculto .env para las variables del docker-compose y nuestra database.sql. Para iniciar varios apaches hacemos uso del comando: docker-compose up --scale apache=4","title":"Practica 17"},{"location":"practica17/#practica-17-balanceo-de-carga-con-haproxy","text":"En esta pr\u00e1ctica vamos a incluir un nuevo contenedor Docker con HAProxy para balancear la carga de los contenedores que ejecutan la aplicaci\u00f3n web.","title":"Pr\u00e1ctica 17: Balanceo de carga con HAProxy"},{"location":"practica17/#docker-compose","text":"Para el archivo docker-compose.yml necesitaremos: Balanceo de carga MySQL phpmyadmin Apache","title":"Docker Compose"},{"location":"practica17/#balanceo-de-carga-haproxy","text":"Utilizaremos la imagen dockercloud/haproxy de DockerHub, a\u00f1adiremos los puertos 80 y 1936 (abrir puertos en AWS) que nos permite acceder a una p\u00e1gina con informaci\u00f3n del balanceo. Creamos un enlace con el servicio que queremos balancear. Los enlaces permiten que los contenedores se descubran entre s\u00ed y transfieran de manera segura informaci\u00f3n sobre un contenedor a otro contenedor y para finalizar montaremos el socket UNIX del Docker daemon (/var/run/docker.sock) para que el contenedor lb pueda comunicarse con el Docker daemon y obtener informaci\u00f3n del resto de contenedores. lb: image: dockercloud/haproxy ports: - 80:80 - 1936:1936 links: - apache volumes: - /var/run/docker.sock:/var/run/docker.sock networks: - frontend-network","title":"Balanceo de carga (HAProxy)"},{"location":"practica17/#apache","text":"Cogeremos de la pr\u00e1ctica 16 la parte de apache, aunque haremos una modificaci\u00f3n. Dentro de apache tendremos que quitar el puerto se\u00f1alado (80:80). Como se puede ver ya est\u00e1 se\u00f1alado dentro del balanceador, ya que si queremos iniciar varios apaches no nos dejar\u00eda porque todos estar\u00edan escuchando al mismo puerto. apache: build: ./apache depends_on: - mysql networks: - frontend-network - backend-network restart: always Para phpmyadmin y MySQL cogeremos la de la pr\u00e1ctica anterior (no hay ning\u00fan cambio). Seguidamente creamos nuestro Dockerfile de nuestra imagen LAMP, nuestro archivo oculto .env para las variables del docker-compose y nuestra database.sql. Para iniciar varios apaches hacemos uso del comando: docker-compose up --scale apache=4","title":"Apache"}]}